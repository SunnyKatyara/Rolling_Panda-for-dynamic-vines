<launch>

<!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>
  <arg name="namespace" default="/tree"/>
  <arg name="hardware_interface" default="EffortJointInterface"/>
  <arg name="controllers" default="joint1_position_controller joint2_position_controller"/>	

  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>

    <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  

  <!-- Load the URDF with the given hardware interface into the ROS Parameter Server -->
  <param name="robot_description" textfile="$(find rolling_panda_opensot)/robots/panda/tree.urdf"/>
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
	args="-urdf -model tree -param robot_description"/>

<!-- Load joint controller configurations from YAML file to parameter server -->
   <rosparam file="$(find rolling_panda_opensot)/configs/tree.yaml" command="load" ns="$(arg namespace)"/>
     command="load"/>

  <node name="tree_controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
	output="screen" ns="$(arg namespace)" args="$(arg controllers)" />
</launch>
