<launch>

<!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>
  <arg name="hardware_interface" default="EffortJointInterface"/>

  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>

    <!-- these are the arguments you can pass this launch file, for example paused:=true -->

  <group ns="tree">

<!-- Load the URDF with the given hardware interface into the ROS Parameter Server -->
  <param name="robot_description" textfile="$(find rolling_panda_opensot)/robots/panda/tree.urdf"/>
  <node name="urdf_spawners" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
	args="-urdf -model tree -param robot_description"/>
  </group>
    

  <!-- Load the URDF with the given hardware interface into the ROS Parameter Server -->
  <param name="robot_description" textfile="$(find rolling_panda_opensot)/robots/panda/panda.urdf"/>

  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
	args="-urdf -model panda -param robot_description"/>
  <node name="image_view" pkg="image_view" type="image_view" respawn="false" output="screen">
  <remap from="image" to="/cameras_pan_tilt/left/image/left" />
  </node>
  <node name="image_views" pkg="image_view" type="image_view" respawn="false" output="screen">
  <remap from="image" to="/camera/depth/image" />
  </node>

    <param name="robot_description_semantic" textfile="$(find rolling_panda_opensot)/robots/panda/panda.srdf"/>
    <param name="cartesian/problem_description" textfile="$(find rolling_panda_opensot)/cartesio/problems/panda_simple_stack.yaml"/>
    
    <arg name="solver" default="OpenSot"/>
    <arg name="prefix" default=""/>
    <arg name="use_xbot_config" default="false"/>
    <arg name="verbosity" default="0"/>
    <arg name="rate" default="10"/>
    <arg name="tf_prefix" default="ci"/>
    <arg name="markers" default="true"/>
    <arg name="namespace" default=""/> 
    <param name="is_model_floating_base" type="bool" value="false"/>
      
    
    <node pkg="cartesian_interface" type="ros_server_node" 
                                    name="ros_server_node" 
                                    required="false" 
                                    output="screen" 
                                    launch-prefix="$(arg prefix)">
                                    
        <param name="model_type" value="RBDL"/>
        <param name="solver" value="$(arg solver)"/>
        <param name="use_xbot_config" value="$(arg use_xbot_config)"/>
        <param name="verbosity" value="$(arg verbosity)"/>
        <param name="rate" value="$(arg rate)"/>
        <param name="tf_prefix" value="$(arg tf_prefix)"/>
        
    </node>

    <node if="$(arg markers)" pkg="cartesian_interface" type="marker_spawner" name="interactive_markers" output="screen">
        <param name="tf_prefix" value="$(arg tf_prefix)"/>
    </node>

    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
        <param name="use_gui" value="true"/>
        <param name="publish_frequency" type="double" value="250.0" />
        <remap from="joint_states" to="/cartesian/posture/reference"/>
        <remap from="zeros" to="/cartesian/posture/home"/>
    </node>

  

</launch>
